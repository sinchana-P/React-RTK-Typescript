import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit'


import axios from 'axios'

type User = {
    id: number
    name: string
}

// object
type InitialState = {
    loading: boolean,
    users: User[],       // users is an Array of Objects
    error: string
}

const initialState: InitialState = {
    loading: false,
    users: [],
    error: ''
}

export const fetchUsers = createAsyncThunk('user/fetchUsers', () => {
    return axios
            .get('https://jsonplaceholder.typicode.com/users')
            .then((response) => response.data)
})

// Reducers r mandatory property 

const userSlice = createSlice({
    name: 'user',
    initialState,
    reducers: {},
    extraReducers: builder => {
        // using the builder we add cases for each of the promise life cycle method. 

        // 1. First action type : fetchUsers.pending
        // use "fetchUsers" : 
        builder.addCase(fetchUsers.pending, state => {
            state.loading = true
        })

        // 2. Second action type : fetchUsers.fulfilled
        builder.addCase(fetchUsers.fulfilled, (state, action: PayloadAction<User[]>) => {
            state.loading = false
            state.users = action.payload                                                                   
            state.error = ''
        })

        // 3. Third action type : fetchUsers.rejected
        builder.addCase(fetchUsers.rejected, (state, action) => {
            state.loading = false
            state.users = []
            state.error = action.error.message || 'Something Went wrong'
            // action.error.message: can be Undefined
        })
    }
})

export default userSlice.reducer



// -------------------------------------------------------


// // v - 24
// // to create "async action" in redux-thunk. 

// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'
// // const createSlice = require('@reduxjs/toolkit').createSlice
// // const createAsyncThunk = require('@reduxjs/toolkit').createAsyncThunk


// import axios from 'axios'
// // to make the actual api request though we still need axios
// // const axios = require('axios')

// const initialState = {
//     loading: false,
//     users: [],
//     error: ''
// }

// // we invoke createAsyncThunk
// // createAsyncThunk, accepts 2 parameters
// // createAsyncThunk( <actionName>, <callback_fun_that_creates_payload> )

// // âœ¨ special functionality of "createAsyncThunk":
// // createAsyncThunk ---> it will automatically dispatch lifecycle actions based on the returned promise.
// // a "promise" is either fullfilled, pending or rejected.

// // createAsyncThunk ---> Generates pending, fulfilled and rejected action types.
// // we can listen to these action types with a reducer function & perform the necessary state tarnsitions.

// // the reducers though r not generated by the slice & have to be added as EXTRA-REDUCERS.

// // a "promise" returned is stored in fetchUsers , which is either fullfilled, pending or rejected.

// // So we use in addCases in reducers as:
// // fetchUsers.pending
// // fetchUsers.fulfilled
// // fetchUsers.rejected

// export const fetchUsers = createAsyncThunk('user/fetchUsers', () => {
//     return axios
//             .get('https://jsonplaceholder.typicode.com/users')
//             .then((response) => response.data)
// })

// // The Reducers though r not generated by the Slice and have to be added as extraReducers

// const userSlice = createSlice({
//     name: 'user',
//     initialState,
//     extraReducers: builder => {
//         // using the builder we add cases for each of the promise life cycle method. 

//         // 1. First action type : fetchUsers.pending
//         // use "fetchUsers" : 
//         builder.addCase(fetchUsers.pending, state => {
//             state.loading = true
//         })

//         // 2. Second action type : fetchUsers.fulfilled
//         builder.addCase(fetchUsers.fulfilled, (state, action) => {
//             state.loading = false
//             state.users = action.payload                                                                   
//             state.error = ''
//         })

//         // 3. Third action type : fetchUsers.rejected
//         builder.addCase(fetchUsers.rejected, (state, action) => {
//             state.loading = false
//             state.data = []
//             state.error = action.error.message
//         })
//     }
// })

// // Export the Reducer & the Async Function:

// // as default export :
// // module.exports = userSlice.reducer
// export default userSlice.reducer

// // as named export : 
// // module.exports.fetchUsers = fetchUsers



// ---------------------------------------------------------